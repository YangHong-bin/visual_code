function getCancelOrderResult(phone_no, cancel_number, cancel_cause) {

    log('getCancelOrderResult function is activated')
    const user_id = getUserId()
    const debugInfos = []
    const now = new Date().toISOString()

    try {

        var company_info = getGlobal('company_info')
        var telno = ''
        const phone_number = getGlobal('phone_number')
        if (phone_number !== '미수집' && phone_number !== 'false') {
          telno = phone_number
        } else {
          telno = company_info['phone']
        }
        var ceo_name = company_info['owner']
        var shop_name = company_info['restaurant_name']
        var bl_number = company_info['company_number']

        //var cancel_map = {
        //    '메뉴/가격 변동': '19',
        //    '메뉴 품절(재료 소진)': '10',
        //    '주문량 폭주': '03',
        //    '영업 시간 아님': '20',
        //    '기상 악화': '15',
        //    '배달원 부재': '20',
        //    '요청사항 적용 불가': '20',
        //    '배달 불가 지역': '08'
        //}
        //var cancel_cause_num = cancel_map[cancel_cause]

        log('telno : ' + telno)
        log('ceo_name : ' + ceo_name)
        log('shop_name : ' + shop_name)
        log('phone_no : ' + phone_no)
        log('cancel_number : ' + cancel_number)
        log('cancel_cause : ' + cancel_cause)
        log('bl_number : ' + bl_number)

        var result = CancelOrder("1", telno, ceo_name, shop_name, phone_no, String(cancel_number), cancel_cause, bl_number)
        debugInfos.push({
          timestamp: now, 
          type: '주문취소',
          user_id,
          chatbot_type: '1',
          telno,
          ceo_name,
          shop_name,
          phone_no,
          cancel_number: String(cancel_number),
          cancel_cause,
          bl_number,
          result: !isEmpty(result) && result.hasOwnProperty('entityStatus')
        })
        log('CancelOrder result : ')
        log(JSON.stringify(result, null, ' '))

        if (!isEmpty(result)) {

            if (result.hasOwnProperty('entityStatus') === true) {
                
                setGlobal('debug_infos', debugInfos)
                return 'true'

            } else {
                log('getCancelOrderResult function result : webhook result is not valid')
                setGlobal('debug_infos', debugInfos)
                return 'false'
            }

        } else {
            log('getCancelOrderResult function result : webhook result is empty')
            setGlobal('debug_infos', debugInfos)
            return 'false'
        }


    } catch (e) {
      
      debugInfos.push({
        timestamp: now, 
        type: '주문취소',
        user_id,
        result: 'getCancelOrderResult try catch error'
      })
      setGlobal('debug_infos', debugInfos)
      log('getCancelOrderResult function try catch error : ')
      log(e)
      return 'false'

    }

}

